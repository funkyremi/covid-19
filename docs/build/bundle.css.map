{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { reasons, profileSchema } from \"./lib/data\";\n  import { writable } from \"svelte/store\";\n  import { profiles, settings } from \"./lib/stores\";\n  import { generatePdf } from \"./lib/pdf\";\n  import { guid } from \"./lib/utils\";\n\n  profiles.useLocalStorage();\n  settings.useLocalStorage();\n\n  let createProfileWindow = false;\n  let newProfile = { id: guid() };\n\n  function activeReason(selectedReason, reason) {\n    return selectedReason && reason.shortText === selectedReason.shortText;\n  }\n  function selectProfile(profile) {\n    const newProfiles = [...$profiles].map(p => ({ ...p, selected: false }));\n    const selectedProfileIndex = newProfiles.findIndex(\n      p => p.id === profile.id\n    );\n    newProfiles[selectedProfileIndex].selected = true;\n    profiles.update(() => newProfiles);\n  }\n  function handleNewProfile() {\n    const oldProfiles = [...$profiles].map(p => ({ ...p, selected: false }));\n    const newProfiles = [...oldProfiles, { ...newProfile, selected: true }];\n    profiles.update(() => newProfiles);\n    createProfileWindow = false;\n    newProfile = { id: guid() };\n  }\n  function deleteProfile(profile) {\n    const tempProfiles = $profiles;\n    const index = tempProfiles.findIndex(p => p.id === profile.id);\n    tempProfiles.splice(index, 1);\n    profiles.update(() => tempProfiles);\n  }\n  async function generate(profile, settings) {\n    const pdfBlob = await generatePdf(profile, settings);\n    downloadBlob(pdfBlob, `attestation.pdf`);\n  }\n  function downloadBlob(blob, fileName) {\n    const link = document.createElement(\"a\");\n    var url = URL.createObjectURL(blob);\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n    link.click();\n  }\n</script>\n\n<style>\n  .margin-top {\n    margin-top: 10px;\n  }\n  main {\n    margin-top: 20px;\n    padding: 30px;\n  }\n</style>\n\n<main>\n  <div class=\"container\">\n    <!-- List profiles -->\n    <div class=\"list-group\">\n      {#each $profiles as profile}\n        <a\n          href=\"javascript:void(0)\"\n          class=\"list-group-item list-group-item-action\"\n          class:active={profile.selected}\n          on:click={() => selectProfile(profile)}>\n          <i class=\"fas fa-user\" />\n          &nbsp; {profile.prenom} {profile.nom}\n          <button\n            class=\"btn btn-light btn-sm float-right\"\n            on:click|stopPropagation={() => deleteProfile(profile)}>\n            <i class=\"fas fa-times\" />\n          </button>\n        </a>\n      {/each}\n      <a\n        href=\"javascript:void(0)\"\n        class=\"list-group-item list-group-item-action\"\n        on:click={() => (createProfileWindow = !createProfileWindow)}>\n        <i class=\"fas fa-plus\" />\n        &nbsp; Nouveau profil\n      </a>\n    </div>\n\n    {#if createProfileWindow}\n      <div>\n        <form on:submit|preventDefault={handleNewProfile}>\n          {#each profileSchema as field}\n            <input\n              class=\"form-control margin-top\"\n              type=\"text\"\n              bind:value={newProfile[field.key]}\n              placeholder={field.value}\n              required />\n          {/each}\n          <div class=\"text-center\">\n            <button\n              type=\"submit\"\n              class=\"btn btn-outline-primary margin-top center-block\">\n              Enregistrer\n            </button>\n          </div>\n        </form>\n      </div>\n    {/if}\n\n    <br />\n\n    {#if $profiles.find(p => p.selected)}\n      <div class=\"list-group\">\n        {#each reasons as reason}\n          <a\n            href=\"javascript:void(0)\"\n            class=\"list-group-item list-group-item-action\"\n            class:active={activeReason($settings.selectedReason, reason)}\n            on:click={() => settings.update(() => ({\n                ...$settings,\n                selectedReason: reason\n              }))}>\n            <i class=\"fas fa-{reason.faIcon}\" />\n            &nbsp; {reason.shortText}\n          </a>\n        {/each}\n      </div>\n\n      <br />\n      <label for=\"created-since\">\n        Attestation créée il y a {$settings.createdXMinutesAgo} minute{$settings.createdXMinutesAgo > 1 ? 's' : ''}\n      </label>\n      <input\n        type=\"range\"\n        class=\"custom-range\"\n        min=\"0\"\n        max=\"60\"\n        step=\"1\"\n        bind:value={$settings.createdXMinutesAgo}\n        id=\"created-since\" />\n      <br />\n      <br />\n      <button\n        type=\"button\"\n        on:click={() => generate($profiles.find(p => p.selected), $settings)}\n        class=\"btn btn-outline-primary btn-lg btn-block\">\n        <i class=\"fas fa-file-pdf\" />\n        &nbsp; Générer l'attestation\n      </button>\n    {/if}\n  </div>\n</main>\n"
  ],
  "names": [],
  "mappings": "AAoDE,WAAW,cAAC,CAAC,AACX,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,AACf,CAAC"
}